@use 'mixins/mixins' as *;
@use 'mixins/config' as *;
@use 'global/var' as *;

@use 'sass:color';

@include b(button) {
  // 基础样式
  display: inline-flex;
  align-items: center;
  justify-content: center;
  vertical-align: middle;
  line-height: 1;
  cursor: pointer;
  outline: none;
  border-color: currentColor;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  border: var(--border-width-base) var(--border-style-base) var(--color-info);
  border-radius: var(--border-radius-base);
  background-color: var(--color-white);
  color: var(--color-text-primary);
  font-weight: var(--font-weight-primary);
  margin: var(--spacing-extra-small);
  user-select: none;
  touch-action: manipulation;
  -webkit-touch-callout: none;
  transition: all var(--animation-duration-base) var(--animation-timing-function-base);
  transition-property: opacity, transform, background-color, border-color;

  .loading-icon {
    display: inline-block;
    animation: rotate 1s linear infinite;
    -webkit-animation: rotate 1s linear infinite;
  }

  // 尺寸变体
  @include m(small) {
    padding: 0 var(--spacing-medium);
    height: var(--component-size-small);
    font-size: var(--font-size-small);
  }

  @include m(medium) {
    padding: 0 var(--spacing-large);
    height: var(--component-size-medium);
    font-size: var(--font-size-base);
  }

  @include m(large) {
    padding: 0 var(--spacing-extra-large);
    height: var(--component-size-large);
    font-size: var(--font-size-medium);
  }

  // 圆角样式
  @include when(round) {
    border-radius: var(--border-radius-round);
  }

  // Circle 样式
  @include when(circle) {
    border-radius: var(--border-radius-circle);
    padding: 0;
    aspect-ratio: 1 / 1;
    @supports not (aspect-ratio: 1/1) {
      &::before {
        content: '';
        float: left;
        padding-top: 100%;
      }
    }

    @include m(small) {
      width: var(--component-size-small);
      height: var(--component-size-small);
    }

    @include m(medium) {
      width: var(--component-size-medium);
      height: var(--component-size-medium);
    }
    @include m(large) {
      width: var(--component-size-large);
      height: var(--component-size-large);
    }
  }

  @include when(icon-only) {
    padding: 0 var(--spacing-small);

    &.#{$state-prefix}circle {
      padding: 0;
    }
  }

  // 默认状态（无type）样式
  @include when(default) {
    background-color: transparent;
    color: var(--color-text-primary);
    border-color: var(--color-info);

    @media (hover: hover) {
      &:hover:not(.#{$state-prefix}disabled):not(.#{$state-prefix}loading) {
        color: var(--color-accent);
        background-color: rgba(var(--color-primary-rgb), 0.1);
        border-color: var(--color-accent-light-3);
      }
    }
    &:active:not(.#{$state-prefix}disabled):not(.#{$state-prefix}loading) {
      color: var(--color-accent);
      border-color: var(--color-accent-dark-2);
    }

    &.#{$state-prefix}loading,
    &.#{$state-prefix}disabled {
      cursor: not-allowed;
      opacity: 0.5;
      transition: none;
      background-color: transparent;
    }
  }

  // 类型变体
  $variants: (
          primary: $color-primary,
          success: $color-success,
          warning: $color-warning,
          danger: $color-danger,
          info: $color-info
  );

  @each $type, $color-base in $variants {
    @include m(#{$type}) {
      color: var(--color-white);
      background-color: $color-base;
      border-color: $color-base;

      @media (hover: hover) {
        &:hover:not(.#{$state-prefix}disabled):not(.#{$state-prefix}loading) {
          background-color: color.adjust($color-base, $lightness: 8%);
          border-color: color.adjust($color-base, $lightness: 8%);
        }
      }

      &:active:not(.#{$state-prefix}disabled):not(.#{$state-prefix}loading) {
        background-color: color.adjust($color-base, $lightness: -10%);
        border-color: color.adjust($color-base, $lightness: -10%);
        transition: none !important;
        opacity: 0.8;
      }

      &.#{$state-prefix}loading,
      &.#{$state-prefix}disabled {
        cursor: not-allowed;
        transition: none;
        background-color: color.adjust($color-base, $lightness: 5%);
        border-color: color.adjust($color-base, $lightness: 5%);
        opacity: 0.5;
      }
    }
  }

  // Plain 样式
  @include when(plain) {
    @each $type, $color-base in $variants {
      &.#{$namespace}-button--#{$type} {
        color: $color-base;
        border-color: $color-base;
        background-color: rgba(var(--color-#{$type}-rgb), 0.1);

        @media (hover: hover) {
          &:hover:not(.#{$state-prefix}disabled):not(.#{$state-prefix}loading) {
            color: var(--color-white);
            background-color: $color-base;
            border-color: $color-base;
          }
        }

        &:active:not(.#{$state-prefix}disabled):not(.#{$state-prefix}loading) {
          color: var(--color-white);
          background-color: color.adjust($color-base, $lightness: 10%);
          border-color: color.adjust($color-base, $lightness: 10%);
          transition: none !important;
          opacity: 0.8;
        }

        &.#{$state-prefix}disabled,
        &.#{$state-prefix}loading {
          color: color.adjust($color-base, $lightness: 15%);
          background-color: rgba(var(--color-#{$type}-rgb), 0.1);
          border-color: color.adjust($color-base, $lightness: 15%);
        }
      }
    }

    // 默认状态下的 plain 样式
    &.#{$state-prefix}default {
      color: var(--color-text-primary);
      border-color: var(--color-info);
      background-color: transparent;

      @media (hover: hover) {
        &:hover:not(.#{$state-prefix}disabled):not(.#{$state-prefix}loading) {
          background-color: transparent;
          border-color: #{color.adjust($color-primary, $lightness: 10%)};
        }
      }

      &:active:not(.#{$state-prefix}disabled):not(.#{$state-prefix}loading) {
        border-color: #{color.adjust($color-primary, $lightness: 10%)};
        background-color: transparent;
      }
    }
  }
}